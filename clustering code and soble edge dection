import os
import numpy as np
import matplotlib.pyplot as plt
import random
import math
import cv2
import sys
import cv2 as cv
from skimage import exposure as ex
from numpy.fft import fft2, ifft2
from scipy.signal import convolve2d
from scipy.signal.windows import gaussian
from random import randrange
from math import sqrt
from PIL import Image
from sklearn.cluster import KMeans
# Define the k-means segmentation function
def kmeans_segmentation(image, k):

  #Performs k-means clustering on an image and returns the segmented image.

    # Reshape the image into a 2D array of pixels and 3 color values (RGB)
  pixel_vals = image.reshape((-1, 3))

  # Convert to float type
  pixel_vals = np.float32(pixel_vals)

  # Criteria for the algorithm to stop running
  criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.85)

  # Perform k-means clustering
  retval, labels, centers = cv2.kmeans(pixel_vals, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

  # Convert data into 8-bit values
  centers = np.uint8(centers)
  segmented_data = centers[labels.flatten()]

  # Reshape data into the original image dimensions
  segmented_image = segmented_data.reshape((image.shape))

  return segmented_image

def sobel_edgedetection_x(image):
  
 # Calculates the horizontal Sobel gradient of an image.
  sobelx_image = cv2.Sobel(image, cv2.CV_8U, 1, 0, ksize=5)
  return sobelx_image

def sobel_edgedetection_y(image):
  
#  Calculates the vertical Sobel gradient of an image.
  

  # Apply Gaussian blur for noise reduction 
  #gaussian_image = cv2.GaussianBlur(image, (3, 3), 0)  
  sobely_image = cv2.Sobel(image, cv2.CV_8U, 0, 1, ksize=5)
  return sobely_image

def sobel_edgedetection(image):
  
# Combines the horizontal and vertical Sobel gradients.
  # Convert the image to grayscale if it's not already
  gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

  # Calculate the horizontal and vertical Sobel gradients
  sobelx_image = sobel_edgedetection_x(gray_image)
  sobely_image = sobel_edgedetection_y(gray_image)

  # Combine the gradients
  sobel_image = cv2.addWeighted(sobelx_image, 0.5, sobely_image, 0.5, 0)
  return sobel_image

def main():
    # Read the image
   # image = cv2.imread('lungcancer.png')
    image1 = cv2.imread('mediantumor.png')
    #image2 = cv2.imread('mediantumor.png')
    # Check if image read successfully
    if image1 is None:
        print("Error: Could not read image!")
        return

    # Convert to RGB (from BGR)
    image_rgb = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)

    # Perform k-means clustering for different values of K
    k_values = [10, 4, 2]
    segmented_images = []

    for k in k_values:
        segmented_image = kmeans_segmentation(image_rgb.copy(), k)
        segmented_images.append(segmented_image)

    # Apply Sobel edge detection to the original image
    sobel_edges = sobel_edgedetection(image_rgb)

    # Display the original image, segmented images, and Sobel edge detection
    plt.figure(figsize=(15, 10))

    plt.subplot(2, 3, 1)
    plt.imshow(image_rgb)
    plt.title('Original Image')
    plt.axis('off')

    for i, (k, segmented_image) in enumerate(zip(k_values, segmented_images), start=2):
        plt.subplot(2, 3, i)
        plt.imshow(segmented_image)
        plt.title(f'Segmented Image, K={k}')
        plt.axis('off')

    plt.subplot(2, 3, 6)
    plt.imshow(sobel_edges, cmap='gray')
    plt.title('Sobel Edge Detection')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()
